---
layout: post
title: 주요 디자인 패턴 용약
image: 3.jpg
date: 2021-03-09 18:40:20 +0200
tags: NHN 기술교육 디자인패턴
categories: 개인학습
---
<h3>1. Stratgy Pattern </h3>
![image](https://user-images.githubusercontent.com/38030969/110408520-083e1400-80c9-11eb-991f-ebfc61f170e4.png)
- 특정 컨텍스트에서 알고리즘(전략)을 별도로 분리하는 설계 방법.
- 컨텍스트 코드의 변경 없이 새로운 전략을 추가 할 수 있다.(OCP를 따르는 구조)
<br><br>
<h3>2. Template Method Pattern </h3>
![image](https://user-images.githubusercontent.com/38030969/110408987-de392180-80c9-11eb-8667-c38197a28491.png)
- 상위 클래스에서 처리의 흐름을 제어하며, 하위클래스에서 처리의 내용을 구체화한다.
- 여러 클래스에서 공통되는 사항은 상위 추상 클래스에서 구현하고, 각각의 상세부분은 하위 클래스에서 구현한다.
- 코드의 중복을 줄이고, Refactoring에 유리한 패턴으로 상속을 통한 확장 개발 방법으로써 많이 사용되는 패턴 중 하나.
<br>
[고려사항]
1. 멤버 함수들의 접근 범위 지정에 대한 명확화 필요. 
2. 가상함수, 일반함수 선언에 대한 결정이 필요. (반드시 구현이 필요한 메서드는 가상함수, 필요한 경우에만 구현하는 경우 일반)
3. Virtual의 수를 줄이는 것이 필요. (virtual table 확장에 따른 성능 문제 발생)
<br><br>
